# -*- coding: utf-8 -*-
"""160204070_assignment5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uEaa3B_kTk_rnrwpFqIv9PMQJ-tqh7L7
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from random import randint

from google.colab import files
upload = files.upload()

df = pd.read_csv('data_k_mean.txt', sep=" ", header=None, dtype='float')

data = df.values

data_length = len(data)
print(data_length)

fig, ax = plt.subplots(1, figsize = (8, 6))
plt.scatter(data[:, 0], data[:, 1], color = 'red', marker = 'o',label="Data points")
plt.title('Plotting data points')
plt.xlabel("X values")
plt.ylabel("Y values")
plt.legend(loc="best")

k = input("enter the value of k:")

rn1 = randint(0, data_length - 1)
rn2 = randint(0, data_length - 1)
print(rn1)
print(rn2)

centorid_1 = np.zeros(2)
centorid_2 = np.zeros(2)
centorid_1 = data[rn1, :]
centorid_2 = data[rn2 ,:]
print(centorid_1)
print(centorid_2)
print(type(centroid))

classifier = np.zeros(data_length)
for j in range(0, 1000):
    cls1, cls2 = 0, 0
    cls1_nmbr, cls2_nmbr = 0, 0
    for i in range(0, data_length):
        dis1 = np.sqrt(np.power((data[i][0] - centorid_1[0]), 2) + np.power((data[i][1] - centorid_1[1]), 2))
        dis2 = np.sqrt(np.power((data[i][0] - centorid_2[0]), 2) + np.power((data[i][1] - centorid_2[1]), 2))
        if dis1 <= dis2:
            cls1 += 1
        else:
            cls2 += 1

    firstclass = np.zeros((2, cls1))
    secondclass = np.zeros((2, cls2))

    count = 0

    for i in range(0, data_length):

        dis1 = np.sqrt(np.power((data[i][0] - centorid_1[0]), 2) + np.power((data[i][1] - centorid_1[1]), 2))
        dis2 = np.sqrt(np.power((data[i][0] - centorid_2[0]), 2) + np.power((data[i][1] - centorid_2[1]), 2))
        if dis1 <= dis2:
            firstclass[0, cls1_nmbr] = data[i][0]
            firstclass[1, cls1_nmbr] = data[i][1]
            if classifier[i] != 1:
                count += 1
            classifier[i] = 1
            cls1_nmbr += 1
        else:
            secondclass[0][cls2_nmbr] = data[i][0]
            secondclass[1][cls2_nmbr] = data[i][1]
            if classifier[i] != 2:
                count += 1
            classifier[i] = 2
            cls2_nmbr += 1
    if count == 0:
        print("Iterration: " ,j)
        break

    centorid_1[0] = np.mean(firstclass[0, :])
    centorid_1[1] = np.mean(firstclass[1, :])
    centorid_2[0] = np.mean(secondclass[0, :])
    centorid_2[1] = np.mean(secondclass[1, :])

fig, ax = plt.subplots(1, figsize = (8, 6))
plt.scatter(firstclass[0], firstclass[1], color='Red', label="Catagory 1")
plt.scatter(secondclass[0], secondclass[1], color='Blue', label="Catagory 2")
plt.title('K-mean CLuster')
plt.xlabel("X values")
plt.ylabel("Y values")
plt.legend(loc="best")
plt.show()